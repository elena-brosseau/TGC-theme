
<div class="wrapper">
    <div class="grid-header">
        <div class="path">
            <p><a href="../collections/">Collections</a> / {{ collection.title }}</p>
        </div>
        <div class="sort">
            <p>Sort by:</p>
            <select id="sort-by">
                {% assign sort_by = collection.sort_by | default: collection.default_sort_by %}
        
                {% for option in collection.sort_options %}
                    <option value="{{ option.value }}" {% if option.value == sort_by %}selected="selected"{% endif %}>
                    {{ option.name }}
                    </option>
                {% endfor %}
            </select>
        </div>
    </div>
    <div class="container">
        {% for product in collection.products %}
            {% render 'product-preview' | product: product %}
        {% endfor %}
    </div>
</div>


<style>

.wrapper {
    width: 80%;
    margin: 50px auto 150px;
}

.grid-header {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 93%;
    margin: 20px auto;
}

.path {
    color: rgb(59, 59, 59);
    display: none;
}

.path a:hover {
    text-decoration: underline;
}

.sort {
    display: flex;
    align-items: center;
}

select {
    font-size: 16px;
    margin-left: 10px;
    padding: 3px;
    border: 1px solid black;
}

.container {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: auto;
    justify-items: center;
    align-items: start;
    max-width: 1200px;
    text-align: center;
}

.product {
    width: 60vw;
    margin: 30px;
}

.product-img {
    max-width: 250px;
}

@media screen and (min-width: 600px) {

    .grid-header {
        justify-content: space-between;
    }

    .path {
        display: block;
    }

    .container {
        grid-template-columns: 1fr 1fr;
    }

    .product-img {
        width: 30vw;
        height: fit-content;
    }

    .product {
        width: 30vw;
    }

}

@media screen and (min-width: 800px) {

    .container {
        grid-template-columns: 1fr 1fr 1fr;
    }

    .product-img {
        width: 20vw;
    }

    .product {
        width: 20vw;
    }
    
}

@media screen and (min-width: 1100px) {

    .container {
        grid-template-columns: 1fr 1fr 1fr 1fr;
    }

    .product-img {
        width: 15vw;
    }

    .product {
        width: 15vw;
    }
    
}

</style>


<script>
  Shopify.queryParams = {};

  // Preserve existing query parameters
  if (location.search.length) {
    var params = location.search.substr(1).split('&');

    for (var i = 0; i < params.length; i++) {
      var keyValue = params[i].split('=');

      if (keyValue.length) {
        Shopify.queryParams[decodeURIComponent(keyValue[0])] = decodeURIComponent(keyValue[1]);
      }
    }
  }

  // Update sort_by query parameter on select change
  document.querySelector('#sort-by').addEventListener('change', function(e) {
    var value = e.target.value;

    Shopify.queryParams.sort_by = value;
    location.search = new URLSearchParams(Shopify.queryParams).toString();
  });
</script>